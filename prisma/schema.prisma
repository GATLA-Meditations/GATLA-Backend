// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id() @default(uuid())
  patient_code String  @unique
  image        String?
  background   String?
  password     String
  renatokens   Int     @default(0)
  progress     Int     @default(0)

  friendsId                    String[]                  @default([])
  notificationPreference       NotificationPreference?
  streakId                     String?
  streak                       Streak?
  treatments                   Treatment[]
  questionnaireSubmissions     QuestionnaireSubmission[]
  UserModule                   UserModule[]
  UserTreatment                UserTreatment[]
  ingameData                   IngameData?
  achievements                 UserAchievement[]
  UserShopItem                 UserShopItem[]
  notifications                UserNotification[]
  moduleQuestionSubmision QuestionModuleUser[]
  tokens                       Token[]
}

model Token {
  id        String   @id @default(uuid())
  token     String
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Admin {
  id       String @id @default(uuid())
  email    String @unique
  password String
  name     String
}

model Treatment {
  id          String @id() @default(uuid())
  name        String
  description String

  users          User[]
  modules        TreatmentModule[]
  tests          UserTreatment[]
  questionnaires Questionnaire[]   @relation("TreatmentQuestionnaire")
}

model UserTreatment {
  id          String  @id() @default(uuid())
  startAnswer Boolean @default(false)
  endAnswer   Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  treatmentId String
  treatment   Treatment @relation(fields: [treatmentId], references: [id])
}

model Module {
  id          String @id() @default(uuid())
  name        String
  description String

  treatments           TreatmentModule[]
  activities           ModuleActivity[]
  UserModule           UserModule[]
  phrases              ModulePhrase[]
  moduleQuestions      QuestionModule[]
}

model TreatmentModule {
  id    String @id() @default(uuid())
  order Int

  treatment_id String
  treatment    Treatment @relation(fields: [treatment_id], references: [id], onDelete: Cascade)

  module_id String
  module    Module @relation(fields: [module_id], references: [id], onDelete: Cascade)
}

model Activity {
  id   String @id() @default(uuid())
  name String

  modules  ModuleActivity[]
  contents ActivityContent[]
}

model ModuleActivity {
  id    String @id() @default(uuid())
  order Int

  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
}

model Content {
  id      String      @id() @default(uuid())
  type    ContentType
  content String

  activities ActivityContent[]
}

model ActivityContent {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now())
  order     Int

  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  contentId String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

enum ContentType {
  VIDEO
  AUDIO
  TEXT
  MED_INTRO
  MED_VIDEO
}

model Questionnaire {
  id   String @id() @default(uuid())
  name String

  questions                QuestionnaireQuestion[]
  questionnaireSubmissions QuestionnaireSubmission[]
  treatments               Treatment[]               @relation("TreatmentQuestionnaire")
}

model QuestionnaireQuestion {
  id       String       @id() @default(uuid())
  type     QuestionType
  name     String
  metadata String

  questionnaireId String
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])

  answers QuestionnaireAnswer[]
}

enum QuestionType {
  NUMERIC
  SINGLE_CHOICE
  NOT_A_QUESTION
}

model QuestionnaireSubmission {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  questionnaireId String
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])

  answers QuestionnaireAnswer[]
}

model QuestionnaireAnswer {
  id     String @id() @default(uuid())
  answer String

  questionnaireSubmissionId String
  questionnaireSubmission   QuestionnaireSubmission @relation(fields: [questionnaireSubmissionId], references: [id])

  questionId String
  question   QuestionnaireQuestion @relation(fields: [questionId], references: [id])
}

model UserModule {
  id              String   @id() @default(uuid())
  createdAt       DateTime @default(now())
  startDate       DateTime
  endDate         DateTime
  lastViewedOrder Int      @default(1)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  moduleId String
  module   Module @relation(fields: [moduleId], references: [id])

  minutesSpent UserModuleMinutesSpent[]
}

model UserModuleMinutesSpent {
  id           String   @id() @default(uuid())
  createdAt    DateTime @default(now())
  minutesSpent Int

  userModuleId String
  userModule   UserModule @relation(fields: [userModuleId], references: [id])
}

model IngameData {
  id     String @id() @default(uuid())
  userId String @unique

  maxStreak        Int      @default(1)
  lastDayConnected DateTime @default(now())
  totalWatchTime   Int      @default(0)

  user User @relation(fields: [userId], references: [id])
}

enum ACHIEVEMENT_TYPE {
  COMMON
  HIDDEN
}

model Achievement {
  id String @id() @default(uuid())

  type                ACHIEVEMENT_TYPE
  title               String
  lockedDescription   String
  lockedImage         String
  unlockedDescription String
  unlockedImage       String
  dataKeyId           String
  dataValue           String

  dataKey DataKey           @relation(fields: [dataKeyId], references: [id])
  users   UserAchievement[]
}

model DataKey {
  id String @id() @default(uuid())

  dataKey String @unique

  achievement Achievement[]
}

model UserAchievement {
  id String @id() @default(uuid())

  createdAt    DateTime @default(now())
  userId       String
  achivementId String

  Achievement Achievement @relation(fields: [achivementId], references: [id])
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Streak {
  id         String   @id() @default(uuid())
  createdAt  DateTime @default(now())
  lastUpdate DateTime @default(now())
  streak     Int      @default(0)
  type       String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

enum ShopItemType {
  BACKGROUND
  AVATAR
  VIDEO
}

model ShopItem {
  id          String       @id() @default(uuid())
  type        ShopItemType
  price       Int
  content_url String

  UserShopItem UserShopItem[]
}

model UserShopItem {
  id String @id() @default(uuid())

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  shopItemId String
  ShopItem   ShopItem @relation(fields: [shopItemId], references: [id])
}

model Phrase {
  id        String   @id() @default(uuid())
  author    String
  content   String
  createdAt DateTime @default(now())

  modules ModulePhrase[]
}

model ModulePhrase {
  id String @id @default(uuid())

  phrase_id String
  phrase    Phrase @relation(fields: [phrase_id], references: [id])

  module_id String
  module    Module @relation(fields: [module_id], references: [id])
}

model NotificationPreference {
  id                        String  @id @default(uuid())
  user_id                   String  @unique
  meditationNotifications   Boolean @default(true)
  motivationalNotifications Boolean @default(true)
  phrasesNotifications      Boolean @default(true)

  User User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id() @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())

  users UserNotification[]
}

model UserNotification {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id])
}

model QuestionModule {
  id        String @id() @default(uuid())
  question  String
  type      String
  metadata  String

  userSubmisions QuestionModuleUser[]

  moduleId String
  module   Module @relation(fields: [moduleId], references: [id])
}

model QuestionModuleUser {
  id String @id @default(uuid())
  answer String

  moduleQuestionId String
  moduleQuestion QuestionModule @relation(references: [id], fields: [moduleQuestionId])

  userId String
  user   User   @relation(references: [id], fields: [userId])
}
